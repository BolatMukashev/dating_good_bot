import logging
import aiohttp
import random
from enum import Enum
from db_connect import async_engine, Base
from aiogram.types import InputMediaPhoto, LabeledPrice
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from config import BOT_API_KEY, ADMIN_ID, MONGO_DB_PASSWORD, MONGO_DB_USERNAME, MIN_COUNT_SYMBOLS, MAX_COUNT_SYMBOLS
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.exc import NoResultFound
from sqlalchemy.orm import sessionmaker
from sqlalchemy import select, update
from models import User, Reaction, Payment, Cache
from test_db import test_db
from buttons import get_18yes_buttons
from functions import get_cached_message_id, save_to_cache, create_or_update_user, update_user_fields, add_reaction, add_payment


# ------------------------------------------------------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞ -------------------------------------------------------

# TODO Supabase - SQL bd Postgres


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_API_KEY)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ —Å–µ—Å—Å–∏–∏
# async_engine = create_async_engine("sqlite+aiosqlite:///my_database.db")
# AsyncSessionLocal = sessionmaker(
#     bind=async_engine,
#     class_=AsyncSession,
#     expire_on_commit=False
# )

# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ - –Ω—É–∂–Ω–∞?
# async def get_async_session():
#     async with AsyncSessionLocal() as session:
#         try:
#             yield session
#         finally:
#             await session.close()


class ReactionType(str, Enum):
    LOVE = "LOVE"
    SEX = "SEX"
    CHAT = "CHAT"
    SKIP = "SKIP"

    @property
    def label(self):
        return {
            self.LOVE: "–°–≤–∏–¥–∞–Ω–∏–µ",
            self.SEX: "–ü–æ—Å—Ç–µ–ª—å",
            self.CHAT: "–û–±—â–µ–Ω–∏–µ",
            self.SKIP: "–ü—Ä–æ–ø—É—Å–∫",
        }[self]

    @property
    def message_template(self):
        return {
            self.LOVE: "–¢—ã –ª–∞–π–∫–Ω—É–ª {name}",
            self.SEX: "–¢—ã –ª–∞–π–∫–Ω—É–ª {name}",
            self.CHAT: "–¢—ã –ª–∞–π–∫–Ω—É–ª {name}",
            self.SKIP: "–¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª {name}",
        }[self]


# ------------------------------------------------------------------- –§—É–Ω–∫—Ü–∏–∏ -------------------------------------------------------


# –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º
async def get_location_info(latitude, longitude, lang='en'):
    url = "https://nominatim.openstreetmap.org/reverse"
    params = {
        "lat": latitude,
        "lon": longitude,
        "format": "json",
        "accept-language": lang
    }
    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as resp:
            data = await resp.json()
            address = data.get("address", {})
            country = address.get("country")
            city = address.get("city") or address.get("town") or address.get("village")
            return country, city


async def get_random_user():
    random_user = random.choice(test_db)
    target_tg_id = random_user.get('tg_id', 0)
    target_name = random_user.get('name', '')
    description = random_user.get('description', '')
    photo_id = random_user.get('photo_id', '')
    caption=f"<b>{target_name}</b>\n<i>{description}</i>"

    button1 = InlineKeyboardButton(text="‚òï –°–≤–∏–¥–∞–Ω–∏–µ", callback_data=f"reaction|LOVE|{target_name}|{target_tg_id}")
    button2 = InlineKeyboardButton(text="üë©‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë® –ü–æ—Å—Ç–µ–ª—å", callback_data=f"reaction|SEX|{target_name}|{target_tg_id}")
    button3 = InlineKeyboardButton(text="üí¨ –û–±—â–µ–Ω–∏–µ", callback_data=f"reaction|CHAT|{target_name}|{target_tg_id}")
    button4 = InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è©", callback_data=f"reaction|SKIP|{target_name}|{target_tg_id}")
    markup = InlineKeyboardMarkup(inline_keyboard=[[button1, button2, button3], [button4]])
    
    return photo_id, caption, markup


async def get_matches_menu_buttons():
    menu_picture = "AgACAgIAAxkBAAICVmhbrdh8xXXGx6Xy1tr0ouQN0sjFAAIZ8DEbBk3hSoeHxcGbNuBQAQADAgADeQADNgQ"

    button0 = InlineKeyboardButton(text=f"üíò –°–æ–≤–ø–∞–¥–µ–Ω–∏—è [{random.randint(0, 1000)}]", callback_data=f"matches")
    button1 = InlineKeyboardButton(text=f"–°–≤–∏–¥–∞–Ω–∏–µ [{random.randint(0, 1000)}]", callback_data=f"who_wants|LOVE")
    button2 = InlineKeyboardButton(text=f"–ü–æ—Å—Ç–µ–ª—å [{random.randint(0, 1000)}]", callback_data=f"who_wants|SEX")
    button3 = InlineKeyboardButton(text=f"–û–±—â–µ–Ω–∏–µ [{random.randint(0, 1000)}]", callback_data=f"who_wants|CHAT")
    button4 = InlineKeyboardButton(text=f"–û–±–Ω–æ–≤–∏—Ç—å üîÑ", callback_data=f"reload_matches_menu")
    markup = InlineKeyboardMarkup(inline_keyboard=[[button0], [button1, button2, button3], [button4],])
    
    return menu_picture, markup


async def get_wants_user(reaction: ReactionType, price: int, priced: bool = False, user_info: dict=None, id_in_cache: int=0):
    if reaction == "LOVE":
        pass
    elif reaction == "SEX":
        pass
    elif reaction == "CHAT":
        pass
    if user_info == None:
        random_user = random.choice(test_db)
        target_tg_id = random_user.get('tg_id', 0)
        target_name = random_user.get('name', '')
        target_username = random_user.get('username', '')
        description = random_user.get('description', '')
        photo_id = random_user.get('photo_id', '')
        caption=f"<b>{target_name}</b>\n<i>{description}</i>"
    else:
        target_name = user_info.get('target_name', '')
        caption = user_info.get('caption', '')
        photo_id = user_info.get('photo_id', '')

    if priced:
        button1 = InlineKeyboardButton(text=f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ üíò –°–æ–≤–ø–∞–¥–µ–Ω–∏—è", callback_data=f"pass")
    else:
        button1 = InlineKeyboardButton(text=f"–î–æ–±–∞–≤–∏—Ç—å –≤ –°–æ–≤–ø–∞–¥–µ–Ω–∏—è {price} ‚≠êÔ∏è", callback_data=f"wants_pay|{target_tg_id}|{price}|{reaction}", pay=True)
    button2 = InlineKeyboardButton(text=" ‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"wants_slider|BACK|{id_in_cache}|{reaction}")
    button3 = InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"wants_slider|NEXT|{id_in_cache}||{reaction}")
    button4 = InlineKeyboardButton(text="‚èÆÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data=f"matches_menu")
    markup = InlineKeyboardMarkup(inline_keyboard=[[button1], [button2, button3], [button4]])

    return photo_id, caption, markup


async def get_matches_user():
    random_user = random.choice(test_db)
    target_tg_id = random_user.get('tg_id', 0)
    target_name = random_user.get('name', '')
    target_username = random_user.get('username', '')
    description = random_user.get('description', '')
    photo_id = random_user.get('photo_id', '')
    caption=f"<b>{target_name}</b>\n<i>{description}</i>"

    button1 = InlineKeyboardButton(text="‚úâÔ∏è –ù–∞—á–∞—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ", callback_data=f"matches_chat|{target_name}|{target_tg_id}", url=f"https://t.me/{target_username}")
    button2 = InlineKeyboardButton(text=" ‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"matches_back|{target_name}|{target_tg_id}")
    button3 = InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"matches_next|{target_name}|{target_tg_id}")
    button4 = InlineKeyboardButton(text="‚èÆÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data=f"matches_menu")
    markup = InlineKeyboardMarkup(inline_keyboard=[[button1], [button2, button3], [button4]])
    
    return photo_id, caption, markup


# ------------------------------------------------------------------- –ö–æ–º–∞–Ω–¥—ã -------------------------------------------------------


# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫
@dp.message(Command("search"))
async def cmd_search(message: types.Message, state: FSMContext):
    photo_id, caption, markup = await get_random_user()
    await message.answer_photo(photo=photo_id, caption=caption, parse_mode="HTML", reply_markup=markup)


# –ö–æ–º–∞–Ω–¥–∞ –°–æ–≤–ø–∞–¥–µ–Ω–∏—è
@dp.message(Command("match"))
async def cmd_match(message: types.Message, state: FSMContext):
    menu_picture, markup = await get_matches_menu_buttons()
    await message.answer_photo(photo=menu_picture, parse_mode="HTML", reply_markup=markup)


# –ö–æ–º–∞–Ω–¥–∞ –°—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    username = message.from_user.username

    if not username:
        await message.answer("""
‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username –≤ Telegram.

–ö–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å:
1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ Telegram ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (tg://settings/username)
2Ô∏è‚É£ –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
3Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–∏ ‚úÖ

–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–µ—Ä–Ω–∏—Å—å –≤ –±–æ—Ç–∞ \n–∏ –Ω–∞–∂–º–∏ üëâ /start , —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
""")
        return
    
    await create_or_update_user(user_id, first_name, username)

    starting_message = await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {first_name}!\n–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞–º?\n\n"
                         "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤:"
                         "\n–®–∞–≥ 1. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ —á—Ç–æ —Ç–µ–±–µ –µ—Å—Ç—å 18 –ª–µ—Ç"
                         "\n–®–∞–≥ 2. –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
                         "\n–®–∞–≥ 3. –£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª"
                         "\n–®–∞–≥ 4. –ö–æ–≥–æ —Ç—ã –∏—â–µ—à—å?"
                         "\n–®–∞–≥ 5. –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ —Ñ–æ—Ç–æ"
                         "\n–®–∞–≥ 6. –†–∞—Å—Å–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ –æ —Å–µ–±–µ"
                         "\n\nüëâ –®–∞–≥ 1. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ —Ç–µ–±–µ –µ—Å—Ç—å 18 –ª–µ—Ç\n\n"
                         "<i>–ü–æ –∑–∞–∫–æ–Ω–∞–º –º–Ω–æ–≥–∏—Ö —Å—Ç—Ä–∞–Ω, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–∞–º–∏, –ø–æ–¥–æ–±–Ω—ã–º–∏ –Ω–∞—à–µ–º—É, —Ç–µ–±–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 18 –ª–µ—Ç.</i>\n\n"
                         "–î–∞–π —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ, —á—Ç–æ —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å –≤—Å–µ —Ä–∏—Å–∫–∏ –∏ —É–∂–µ –¥–æ—Å—Ç–∏–≥ –Ω—É–∂–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞.",
                         reply_markup = await get_18yes_buttons(),
                         parse_mode="HTML")
    
    # –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É
    await save_to_cache(user_id, "start_message_id", starting_message.message_id)


# ------------------------------------------------------------------- –ö–æ–ª–±–µ–∫–∏ -------------------------------------------------------


gender = {"MAN": "–ú—É–∂—á–∏–Ω–∞", "WOMAN": "–ñ–µ–Ω—â–∏–Ω–∞", "ANY": "–î—Ä—É–≥–æ–µ"}
gender_search = {"search_man": "–ò—â—É –ú—É–∂—á–∏–Ω—É", "search_woman": "–ò—â—É –ñ–µ–Ω—â–∏–Ω—É", "search_any": "–ü–æ–ª –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è"}
gender_search_db = {"search_man": "MAN", "search_woman": "WOMAN", "search_any": "ANY"}


@dp.callback_query(F.data == "18yes")
async def query_18years(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    # –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É
    await update_user_fields(user_id, eighteen_years_old=True)

    await callback.answer(text="–û—Ç–ª–∏—á–Ω–æ! –¢—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª, —á—Ç–æ —Ç–µ–±–µ –±–æ–ª—å—à–µ 18 –ª–µ—Ç")

    # 1. –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —É–±–∏—Ä–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏
    await callback.message.edit_text(text="‚úÖ –®–∞–≥ 1 –≤—ã–ø–æ–ª–Ω–µ–Ω")

    # 2. –û—Ç–¥–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    kb = [[types.KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É"
    )
    await callback.message.answer(
        "üëâ –®–∞–≥ 2. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ\n\n" \
        "–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –≥–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è. –ü–æ–∏—Å–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Å—Ä–µ–¥–∏ –ª—é–¥–µ–π –∏–∑ —Ç–æ–≥–æ –∂–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ –∏ —Ç—ã.\n\n"
        "<i>–ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –¥–µ—Å–∫—Ç–æ–ø/–ü–ö –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ—Ç —ç—Ç–∞–ø</i>",
        reply_markup=keyboard, parse_mode="HTML")


# –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª–æ–∫–∞—Ü–∏—é
@dp.message(F.location)
async def handle_location(message: types.Message):
    user_id = message.from_user.id
    await message.delete() #—É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ª–æ–∫–∞—Ü–∏–µ–π
    latitude = message.location.latitude
    longitude = message.location.longitude

    # 1. –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —è–∑—ã–∫—É Telegram)
    user_language_code = message.from_user.language_code or 'ru'
    country_local, city_local = await get_location_info(latitude, longitude, lang=user_language_code)

    # 2. –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É
    country_en, city_en = await get_location_info(latitude, longitude, lang='en')

    # –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É
    await update_user_fields(user_id, country=country_en, city=city_en)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    await message.answer(
        f"‚úÖ –®–∞–≥ 2 –≤—ã–ø–æ–ª–Ω–µ–Ω\n–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤:\n–ì–æ—Ä–æ–¥: {city_local}\n–°—Ç—Ä–∞–Ω–∞: {country_local}",
        reply_markup=ReplyKeyboardRemove()
    )
    button1 = InlineKeyboardButton(text="–ú—É–∂—á–∏–Ω–∞", callback_data="MAN")
    button2 = InlineKeyboardButton(text="–ñ–µ–Ω—â–∏–Ω–∞", callback_data="WOMAN")
    button3 = InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="ANY")
    markup = InlineKeyboardMarkup(inline_keyboard=[[button1], [button2], [button3]])
    await message.answer("üëâ –®–∞–≥ 3. –£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª", reply_markup=markup)


@dp.callback_query(F.data.in_(["MAN", "WOMAN", "ANY"]))
async def query_gender(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    # –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É
    await update_user_fields(user_id, gender=callback.data)

    await callback.answer(text=f"–û—Ç–ª–∏—á–Ω–æ! –¢—ã —É–∫–∞–∑–∞–ª: {gender.get(callback.data)}")
    await callback.message.edit_text(text="‚úÖ –®–∞–≥ 3 –≤—ã–ø–æ–ª–Ω–µ–Ω")
    button1 = InlineKeyboardButton(text="–ò—â—É –ú—É–∂—á–∏–Ω—É", callback_data="search_man")
    button2 = InlineKeyboardButton(text="–ò—â—É –ñ–µ–Ω—â–∏–Ω—É", callback_data="search_woman")
    button3 = InlineKeyboardButton(text="–ü–æ–ª –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è", callback_data="search_any")
    markup = InlineKeyboardMarkup(inline_keyboard=[[button1], [button2], [button3]])
    await callback.message.answer("üëâ –®–∞–≥ 4. –£–∫–∞–∂–∏ –∫–æ—Ç–æ —Ç—ã –∏—â–µ—à—å", reply_markup=markup)


@dp.callback_query(F.data.in_(["search_man", "search_woman", "search_any"]))
async def query_gender_search(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    # –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É
    await update_user_fields(user_id, gender_search=gender_search_db.get(callback.data))

    await callback.answer(text=f"–û—Ç–ª–∏—á–Ω–æ! –¢—ã —É–∫–∞–∑–∞–ª: {gender_search.get(callback.data)}")
    await callback.message.edit_text(text="‚úÖ –®–∞–≥ 4 –≤—ã–ø–æ–ª–Ω–µ–Ω")
    await callback.message.answer("üëâ –®–∞–≥ 5. –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ —Ñ–æ—Ç–æ üì∑", reply_markup=ReplyKeyboardRemove())


@dp.message(F.photo)
async def handle_photo(message: types.Message):
    user_id = message.from_user.id
    photo = message.photo[-1]
    file_id = photo.file_id

    # –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É
    await update_user_fields(user_id, photo_id = file_id)

    await message.delete()
    await message.answer("‚úÖ –®–∞–≥ 5 –≤—ã–ø–æ–ª–Ω–µ–Ω")
    await message.answer("üëâ –®–∞–≥ 6. –†–∞—Å—Å–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ –æ —Å–µ–±–µ\n<i>–ü–æ—Å—Ç–∞—Ä–∞–π—Å—è —É–ª–æ–∂–∏—Ç—å—Å—è –≤ 2-3 —Å—Ç—Ä–æ–∫–∏</i>", parse_mode="HTML")


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±–µ–∫–∞ –ø–æ–∏—Å–∫–∞
@dp.callback_query(lambda c: c.data.startswith("reaction"))
async def handle_reaction(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    _, reaction_str, target_name, target_tg_id = callback.data.split("|", 3)

    try:
        reaction = ReactionType(reaction_str)
    except ValueError:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è")
        return

    # –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É
    await add_reaction(user_id, target_tg_id, reaction_str)

    await callback.answer(reaction.message_template.format(name=target_name))

    photo_id, caption, markup = await get_random_user()
    await callback.message.edit_media(media=InputMediaPhoto(media=photo_id))
    await callback.message.edit_caption(caption=caption, parse_mode="HTML")
    await callback.message.edit_reply_markup(reply_markup=markup)


@dp.callback_query(F.data == "matches")
async def query_matches(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    photo_id, caption, markup = await get_matches_user()
    await callback.message.edit_media(media=InputMediaPhoto(media=photo_id))
    await callback.message.edit_caption(caption=caption, parse_mode="HTML")
    await callback.message.edit_reply_markup(reply_markup=markup)


@dp.callback_query(F.data == "matches_menu")
async def query_matches_menu(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    menu_picture, markup = await get_matches_menu_buttons()
    await callback.message.edit_media(media=InputMediaPhoto(media=menu_picture))
    await callback.message.edit_reply_markup(reply_markup=markup)


@dp.callback_query(F.data == "reload_matches_menu")
async def query_reload_matches_menu(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    _, markup = await get_matches_menu_buttons()
    await callback.message.edit_reply_markup(reply_markup=markup)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±–µ–∫–∞ –∫–æ–º—É –Ω—Ä–∞–≤–∏—à—å—Å—è
@dp.callback_query(lambda c: c.data.startswith("who_wants"))
async def handle_who_wants(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    _, reaction = callback.data.split("|", 1)
    photo_id, caption, markup = await get_wants_user(reaction, 1)
    await callback.message.edit_media(media=InputMediaPhoto(media=photo_id))
    await callback.message.edit_caption(caption=caption, parse_mode="HTML")
    await callback.message.edit_reply_markup(reply_markup=markup)


# ------------------------------------------------------------------- –û–ø–ª–∞—Ç–∞ -------------------------------------------------------

def payment_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Telegram Stars ‚≠êÔ∏è", pay=True)
    return builder.as_markup()


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±–µ–∫–∞ –æ–ø–ª–∞—Ç—ã
@dp.callback_query(lambda c: c.data.startswith("wants_pay"))
async def handle_wants_pay(callback: types.CallbackQuery):
    _, target_tg_id, target_name, caption, photo_id, price_str, reaction = callback.data.split("|")
    price = int(price_str)

    prices = [LabeledPrice(label=f"–î–æ–±–∞–≤–∏—Ç—å {target_name} –≤ –°–æ–≤–ø–∞–¥–µ–Ω–∏—è", amount=price)]

    sent_invoice = await callback.message.answer_invoice(
        title=f"–î–æ–±–∞–≤–∏—Ç—å –≤ –°–æ–≤–ø–∞–¥–µ–Ω–∏—è {target_name}",
        description=f"–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –°–æ–≤–ø–∞–¥–µ–Ω–∏—è, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ñ–∏–ª—é {target_name} –∏ —Å–º–æ–∂–µ—Ç–µ –µ–π/–µ–º—É –Ω–∞–ø–∏—Å–∞—Ç—å",
        payload=f"payment_ok|{target_tg_id}|{price}|{callback.message.message_id}|{target_name}|{caption}|{photo_id}|{reaction}",
        provider_token="",
        currency="XTR",
        prices=prices,
        reply_markup=payment_keyboard()
    )

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ö—ç—à
    await save_to_cache(callback.from_user.id, "invoice_message_id", sent_invoice.message_id)

    await callback.answer()


@dp.pre_checkout_query()
async def pre_checkout(pre_checkout_query: types.PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)


@dp.message(lambda message: message.successful_payment is not None)
async def on_successful_payment(message: types.Message):
    payload = message.successful_payment.invoice_payload
    user_id = message.from_user.id

    # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ payload:
    if payload.startswith("payment_ok"):
        _, target_id, price, message_id, target_name, caption, photo_id, reaction = payload.split("|")
        user_info = {"target_name": target_name, "caption": caption, "photo_id": photo_id}

        # –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É
        await add_payment(user_id, target_id, price)
    
    # –∏–∑–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å
    markup = await get_wants_user(reaction, 1, priced=True, user_info=user_info)
    await bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=int(message_id), reply_markup=markup)
    
    # –ø–æ–ª—É—á–∞–µ–º id –∏–∑ –ö—ç—à
    invoice_message_id = await get_cached_message_id(user_id, "invoice_message_id")
    await bot.delete_message(chat_id=message.chat.id, message_id=invoice_message_id)


# ------------------------------------------------------------------- –¢–µ–∫—Å—Ç -------------------------------------------------------


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ - –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –∏–∑–º–µ–Ω—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ "–æ —Å–µ–±–µ"
@dp.message(F.text)
async def handle_text(message: types.Message):
    user_id = message.from_user.id
    await message.delete()
    text = message.text
    print(text)
    if len(text) >= MIN_COUNT_SYMBOLS and len(text) <= MAX_COUNT_SYMBOLS:

        # –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É
        await update_user_fields(user_id, about_me = text)

        await message.answer("‚úÖ –®–∞–≥ 6 –≤—ã–ø–æ–ª–Ω–µ–Ω")
        await message.answer("üîç –ù–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ - /search" \
        "\nüíò–°–æ–≤–ø–∞–¥–µ–Ω–∏—è (match) - /match")

    elif len(text) < MIN_COUNT_SYMBOLS:
        await message.answer(f"‚ùå –®–∞–≥ 6 –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ {MIN_COUNT_SYMBOLS}.\n–í–∞—à —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç {len(text)} —Å–∏–º–≤–æ–ª–æ–≤.\n–ü–æ–ø—Ä–æ–±—É–π –¥–æ–ø–æ–ª–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å –µ—â–µ —Ä–∞–∑")
    elif len(text) > MAX_COUNT_SYMBOLS:
        await message.answer(f"‚ùå –®–∞–≥ 6 –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ {MAX_COUNT_SYMBOLS} —Å–∏–º–≤–æ–ª–æ–≤.\n–í–∞—à —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç {len(text)} —Å–∏–º–≤–æ–ª–æ–≤.\n–ü–æ–ø—Ä–æ–±—É–π —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å –µ—â–µ —Ä–∞–∑")


# ------------------------------------------------------------------- –ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞ -------------------------------------------------------


async def main():
    async with async_engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())