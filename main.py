import logging
import aiohttp
import random
from aiogram.types import InputMediaPhoto
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from config import BOT_API_KEY, ADMIN_ID, MONGO_DB_PASSWORD, MONGO_DB_USERNAME
from test_db import test_db


# ------------------------------------------------------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞ -------------------------------------------------------


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_API_KEY)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# ------------------------------------------------------------------- –§—É–Ω–∫—Ü–∏–∏ -------------------------------------------------------

# –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º
async def get_location_info(latitude, longitude, lang='en'):
    url = "https://nominatim.openstreetmap.org/reverse"
    params = {
        "lat": latitude,
        "lon": longitude,
        "format": "json",
        "accept-language": lang
    }
    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as resp:
            data = await resp.json()
            address = data.get("address", {})
            country = address.get("country")
            city = address.get("city") or address.get("town") or address.get("village")
            return country, city
        

async def get_random_user():
    random_user = random.choice(test_db)
    target_tg_id = random_user.get('tg_id', 0)
    target_name = random_user.get('name', '')
    description = random_user.get('description', '')
    photo_id = random_user.get('photo_id', '')
    caption=f"<b>{target_name}</b>\n<i>{description}</i>"

    button1 = InlineKeyboardButton(text="‚òï –°–≤–∏–¥–∞–Ω–∏–µ", callback_data=f"reaction_love|{target_name}|{target_tg_id}")
    button2 = InlineKeyboardButton(text="üë©‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë® –ü–æ—Å—Ç–µ–ª—å", callback_data=f"reaction_sex|{target_name}|{target_tg_id}")
    button3 = InlineKeyboardButton(text="üí¨ –û–±—â–µ–Ω–∏–µ", callback_data=f"reaction_chat|{target_name}|{target_tg_id}")
    button4 = InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è©", callback_data=f"reaction_skip|{target_name}|{target_tg_id}")
    markup = InlineKeyboardMarkup(inline_keyboard=[[button1, button2, button3], [button4]])
    
    return photo_id, caption, markup


# ------------------------------------------------------------------- –ö–æ–º–∞–Ω–¥—ã -------------------------------------------------------


# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫
@dp.message(Command("search"))
async def cmd_search(message: types.Message, state: FSMContext):
    photo_id, caption, markup = await get_random_user()
    await message.answer_photo(photo=photo_id, caption=caption, parse_mode="HTML", reply_markup=markup)


# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    username = message.from_user.username
    if username == None:
        await message.answer("""
‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username –≤ Telegram.

–ö–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å:
1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ Telegram ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (tg://settings/username)
2Ô∏è‚É£ –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
3Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–∏ ‚úÖ

–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–µ—Ä–Ω–∏—Å—å –≤ –±–æ—Ç–∞ \n–∏ –Ω–∞–∂–º–∏ üëâ /start , —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
""")
    else:
        print(f'–ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É: {user_id}, {first_name}, {username}')
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {first_name}!\n–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞–º?\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤:\n\n–®–∞–≥ 1. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ —á—Ç–æ —Ç–µ–±–µ –µ—Å—Ç—å 18 –ª–µ—Ç\n–®–∞–≥ 2. –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ\n–®–∞–≥ 3. –£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª \n–®–∞–≥ 4. –ö–æ–≥–æ —Ç—ã –∏—â–µ—à—å? \n–®–∞–≥ 5. –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ —Ñ–æ—Ç–æ\n–®–∞–≥ 6. –†–∞—Å—Å–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ –æ —Å–µ–±–µ")
        button = InlineKeyboardButton(text="–ú–Ω–µ –±–æ–ª—å—à–µ 18 –ª–µ—Ç", callback_data="18yes")
        markup = InlineKeyboardMarkup(inline_keyboard=[[button]])
        await message.answer("üëâ –®–∞–≥ 1. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ —Ç–µ–±–µ –µ—Å—Ç—å 18 –ª–µ—Ç\n\n"
                             "<i>–ü–æ –∑–∞–∫–æ–Ω–∞–º –º–Ω–æ–≥–∏—Ö —Å—Ç—Ä–∞–Ω, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–∞–º–∏, –ø–æ–¥–æ–±–Ω—ã–º–∏ –Ω–∞—à–µ–º—É, —Ç–µ–±–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 18 –ª–µ—Ç.</i>\n\n"
                             "–î–∞–π —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ, —á—Ç–æ —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å –≤—Å–µ —Ä–∏—Å–∫–∏ –∏ —É–∂–µ –¥–æ—Å—Ç–∏–≥ –Ω—É–∂–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞.",
                             reply_markup=markup,
                             parse_mode="HTML")


# ------------------------------------------------------------------- –ö–æ–ª–±–µ–∫–∏ -------------------------------------------------------


gender = {"man": "–ú—É–∂—á–∏–Ω–∞", "woman": "–ñ–µ–Ω—â–∏–Ω–∞", "any": "–î—Ä—É–≥–æ–µ"}
gender_choice = {"search_man": "–ò—â—É –ú—É–∂—á–∏–Ω—É", "search_woman": "–ò—â—É –ñ–µ–Ω—â–∏–Ω—É", "search_any": "–ü–æ–ª –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è"}

@dp.callback_query(F.data == "18yes")
async def to_query(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    print(f'–ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É: {user_id} –ï—Å—Ç—å 18 - True')
    await callback.answer(text="–û—Ç–ª–∏—á–Ω–æ! –¢—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª, —á—Ç–æ —Ç–µ–±–µ –±–æ–ª—å—à–µ 18 –ª–µ—Ç")

    # 1. –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —É–±–∏—Ä–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏
    await callback.message.edit_text(text="‚úÖ –®–∞–≥ 1 –≤—ã–ø–æ–ª–Ω–µ–Ω")

    # 2. –û—Ç–¥–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    kb = [[types.KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É"
    )
    await callback.message.answer(
        "üëâ –®–∞–≥ 2. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ\n–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –≥–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è. –ü–æ–∏—Å–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Å—Ä–µ–¥–∏ –ª—é–¥–µ–π –∏–∑ —Ç–æ–≥–æ –∂–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ –∏ —Ç—ã.",
        reply_markup=keyboard)


# –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª–æ–∫–∞—Ü–∏—é
@dp.message(F.location)
async def handle_location(message: types.Message):
    user_id = message.from_user.id
    await message.delete() #—É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ª–æ–∫–∞—Ü–∏–µ–π
    latitude = message.location.latitude
    longitude = message.location.longitude

    # 1. –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —è–∑—ã–∫—É Telegram)
    user_language_code = message.from_user.language_code or 'ru'
    country_local, city_local = await get_location_info(latitude, longitude, lang=user_language_code)

    # 2. –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É
    country_en, city_en = await get_location_info(latitude, longitude, lang='en')

    # –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É (–∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º)
    print(f"–ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É: {user_id} —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ {city_en}, {country_en}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    await message.answer(
        f"‚úÖ –®–∞–≥ 2 –≤—ã–ø–æ–ª–Ω–µ–Ω\n–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤:\n–ì–æ—Ä–æ–¥: {city_local}\n–°—Ç—Ä–∞–Ω–∞: {country_local}",
        reply_markup=ReplyKeyboardRemove()
    )
    button1 = InlineKeyboardButton(text="–ú—É–∂—á–∏–Ω–∞", callback_data="man")
    button2 = InlineKeyboardButton(text="–ñ–µ–Ω—â–∏–Ω–∞", callback_data="woman")
    button3 = InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="any")
    markup = InlineKeyboardMarkup(inline_keyboard=[[button1], [button2], [button3]])
    await message.answer("üëâ –®–∞–≥ 3. –£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª", reply_markup=markup)


@dp.callback_query(F.data.in_(["man", "woman", "any"]))
async def to_query2(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    print(f'–ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É: {user_id} –≤—ã–±—Ä–∞–ª –ø–æ–ª {callback.data}')
    await callback.answer(text=f"–û—Ç–ª–∏—á–Ω–æ! –¢—ã —É–∫–∞–∑–∞–ª, —á—Ç–æ —Ç—ã {gender.get(callback.data)}")
    await callback.message.edit_text(text="‚úÖ –®–∞–≥ 3 –≤—ã–ø–æ–ª–Ω–µ–Ω")
    button1 = InlineKeyboardButton(text="–ò—â—É –ú—É–∂—á–∏–Ω—É", callback_data="search_man")
    button2 = InlineKeyboardButton(text="–ò—â—É –ñ–µ–Ω—â–∏–Ω—É", callback_data="search_woman")
    button3 = InlineKeyboardButton(text="–ü–æ–ª –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è", callback_data="search_any")
    markup = InlineKeyboardMarkup(inline_keyboard=[[button1], [button2], [button3]])
    await callback.message.answer("üëâ –®–∞–≥ 4. –£–∫–∞–∂–∏ –∫–æ—Ç–æ —Ç—ã –∏—â–µ—à—å", reply_markup=markup)


@dp.callback_query(F.data.in_(["search_man", "search_woman", "search_any"]))
async def to_query3(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    print(f'–ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É: {user_id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–æ–∏—Å–∫–µ {callback.data}')
    await callback.answer(text=f"–û—Ç–ª–∏—á–Ω–æ! –¢—ã —É–∫–∞–∑–∞–ª, —á—Ç–æ —Ç—ã –∏—â–µ—à—å {gender_choice.get(callback.data)}")
    await callback.message.edit_text(text="‚úÖ –®–∞–≥ 4 –≤—ã–ø–æ–ª–Ω–µ–Ω")
    await callback.message.answer("üëâ –®–∞–≥ 5. –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ —Ñ–æ—Ç–æ üì∑", reply_markup=ReplyKeyboardRemove())


@dp.message(F.photo)
async def handle_photo(message: types.Message):
    user_id = message.from_user.id
    photo = message.photo[-1]
    file_id = photo.file_id
    print(f"–ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É: {user_id} file_id —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ {file_id}")
    await message.delete()
    await message.answer("‚úÖ –®–∞–≥ 5 –≤—ã–ø–æ–ª–Ω–µ–Ω")
    await message.answer("üëâ –®–∞–≥ 6. –†–∞—Å—Å–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ –æ —Å–µ–±–µ")


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±–µ–∫–∞ –ø–æ–∏—Å–∫–∞, —Å–≤–∏–¥–∞–Ω–∏–µ
@dp.callback_query(lambda c: c.data.startswith("reaction_love|"))
async def handle_reaction_love(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    parts = callback.data.split("|", 2)
    target_name = parts[1]
    target_tg_id = parts[2]
    print(f'–ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É: {user_id} —Ä–µ–∞–∫—Ü–∏—è –°–≤–∏–¥–∞–Ω–∏–µ –Ω–∞ {target_tg_id}')
    await callback.answer(text=f"–¢—ã –ª–∞–π–∫–Ω—É–ª {target_name}")

    photo_id, caption, markup = await get_random_user()
    await callback.message.edit_media(media=InputMediaPhoto(media=photo_id))
    await callback.message.edit_caption(caption=caption, parse_mode="HTML")
    await callback.message.edit_reply_markup(reply_markup=markup)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±–µ–∫–∞ –ø–æ–∏—Å–∫–∞, –ø–æ—Å—Ç–µ–ª—å
@dp.callback_query(lambda c: c.data.startswith("reaction_sex|"))
async def handle_reaction_sex(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    parts = callback.data.split("|", 2)
    target_name = parts[1]
    target_tg_id = parts[2]
    print(f'–ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É: {user_id} —Ä–µ–∞–∫—Ü–∏—è –ü–æ—Å—Ç–µ–ª—å –Ω–∞ {target_tg_id}')
    await callback.answer(text=f"–¢—ã –ª–∞–π–∫–Ω—É–ª {target_name}")

    photo_id, caption, markup = await get_random_user()
    await callback.message.edit_media(media=InputMediaPhoto(media=photo_id))
    await callback.message.edit_caption(caption=caption, parse_mode="HTML")
    await callback.message.edit_reply_markup(reply_markup=markup)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±–µ–∫–∞ –ø–æ–∏—Å–∫–∞, –æ–±—â–µ–Ω–∏–µ
@dp.callback_query(lambda c: c.data.startswith("reaction_chat|"))
async def handle_reaction_chat(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    parts = callback.data.split("|", 2)
    target_name = parts[1]
    target_tg_id = parts[2]
    print(f'–ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É: {user_id} —Ä–µ–∞–∫—Ü–∏—è –û–±—â–µ–Ω–∏–µ –Ω–∞ {target_tg_id}')
    await callback.answer(text=f"–¢—ã –ª–∞–π–∫–Ω—É–ª {target_name}")

    photo_id, caption, markup = await get_random_user()
    await callback.message.edit_media(media=InputMediaPhoto(media=photo_id))
    await callback.message.edit_caption(caption=caption, parse_mode="HTML")
    await callback.message.edit_reply_markup(reply_markup=markup)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±–µ–∫–∞ –ø–æ–∏—Å–∫–∞, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
@dp.callback_query(lambda c: c.data.startswith("reaction_skip|"))
async def handle_reaction_skip(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    parts = callback.data.split("|", 2)
    target_name = parts[1]
    target_tg_id = parts[2]
    print(f'–ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É: {user_id} —Ä–µ–∞–∫—Ü–∏—è –ü—Ä–æ–ø—É—Å–∫ –Ω–∞ {target_tg_id}')
    await callback.answer(text=f"–¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª {target_name}")

    photo_id, caption, markup = await get_random_user()
    await callback.message.edit_media(media=InputMediaPhoto(media=photo_id))
    await callback.message.edit_caption(caption=caption, parse_mode="HTML")
    await callback.message.edit_reply_markup(reply_markup=markup)


@dp.message(F.text)
async def handle_text(message: types.Message):
    user_id = message.from_user.id
    await message.delete()
    text = message.text
    print(f"–ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É: {user_id} –¥–æ–±–∞–≤–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ {text}")
    await message.answer("‚úÖ –®–∞–≥ 6 –≤—ã–ø–æ–ª–Ω–µ–Ω")
    await message.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É: /search")


async def main():
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())