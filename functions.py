from sqlalchemy import select, or_, delete, union_all
from sqlalchemy.dialects.postgresql import insert
from sqlalchemy.orm import aliased
from models import User, Reaction, Payment, Cache, Gender, PaymentType
from typing import Any, Optional
from db_connect import AsyncSessionLocal
import aiohttp
from languages import get_texts
from config import *


# TODO –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


__all__ = ['save_to_cache',
           'get_cached_message_id',
           'delete_from_cache',
           'create_or_update_user',
           'update_user_fields',
           'get_user_by_id',
           'add_reaction',
           'add_payment',
           'get_location_info',
           'find_first_matching_user',
           'get_caption',
           'get_gender_label',
           'get_gender_search_label',
           'delete_user_by_id',
           'get_location_opencage',
           'get_match_targets',
           'get_collection_targets',
           'get_intent_targets',
           'get_prev_next_ids',
           ]


async def find_first_matching_user(current_user_id: int) -> Optional[User]:
    async with AsyncSessionLocal() as session:
        # –ü–û–ò–°–ö. –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(User).where(User.telegram_id == current_user_id)
        )
        current_user = result.scalar_one_or_none()
        if not current_user:
            return None

        gender = current_user.gender
        gender_search = current_user.gender_search

        # –ö–æ–≥–æ —Ç—ã –∏—â–µ—à—å
        gender_condition = or_(
            User.gender == gender_search,
            gender_search == Gender.ANY
        )

        # –ü–æ–¥—Ö–æ–¥–∏—à—å –ª–∏ —Ç—ã –∏–º
        if gender == Gender.ANY:
            search_condition = User.gender_search == Gender.ANY
        else:
            search_condition = or_(
                User.gender_search == gender,
                User.gender_search == Gender.ANY
            )

        
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Ö, –Ω–∞ –∫–æ–≥–æ —É–∂–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª
        ReactionAlias = aliased(Reaction)
        subquery = select(ReactionAlias.target_tg_id).where(
            ReactionAlias.telegram_id == current_user_id
        )

        # –û–±—â–∏–µ —É—Å–ª–æ–≤–∏—è
        base_conditions = [
            User.telegram_id != current_user_id,
            gender_condition,
            search_condition,
            User.incognito_switch == False,
            User.banned == False,
            User.telegram_id.not_in(subquery)
        ]

        # üëâ –®–∞–≥ 1: —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ —Å—Ç—Ä–∞–Ω–µ –∏ –≥–æ—Ä–æ–¥—É
        query_city = select(User).where(
            *base_conditions,
            User.city == current_user.city,
            User.country == current_user.country
        ).limit(1)

        result = await session.execute(query_city)
        match = result.scalar_one_or_none()
        if match:
            return match

        # üëâ –®–∞–≥ 2: –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –≥–æ—Ä–æ–¥–µ ‚Äî –∏—â–µ–º –ø–æ —Å—Ç—Ä–∞–Ω–µ
        query_country = select(User).where(
            *base_conditions,
            User.country == current_user.country
        ).limit(1)

        result = await session.execute(query_country)
        match = result.scalar_one_or_none()
        if match:
            return match

        # üëâ –®–∞–≥ 3: —Å–æ–≤—Å–µ–º –Ω–∏–∫–æ–≥–æ
        return None


async def get_caption(user: User, lang: str = None, reaction: str = None) -> str:
    # –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if lang and reaction:
        texts = await get_texts(lang)
        reaction_str = texts["BUTTONS_TEXT"]["reaction"][reaction]
        caption=(f"<b>{user.first_name}</b>"
        f"\nüìå {user.country_local}, {user.city_local}"
        f"\n<i>{texts["TEXT"]["match_menu"]["you_want"].format(reaction=reaction_str)}</i>"
        f"\n\n<i>{user.about_me}</i>")
    else:
        caption=(f"<b>{user.first_name}</b>"
        f"\nüìå {user.country_local}, {user.city_local}"
        f"\n\n<i>{user.about_me}</i>")
    
    return caption


async def get_gender_label(gender: Gender, lang: str) -> str:
    texts = await get_texts(lang)
    return texts['GENDER_LABELS'][gender]


async def get_gender_search_label(gender: Gender, lang: str) -> str:
    texts = await get_texts(lang)
    return texts['GENDER_SEARCH_LABELS'][gender]


# —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ö—ç—à —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
# –ü—Ä–∏–º–µ—Ä:
# await save_to_cache(user_id, "start_message_id", starting_message.message_id)
# await save_to_cache(callback.from_user.id, "invoice_message_id", sent_invoice.message_id)
async def save_to_cache(user_id: int, parameter: str, message_id: int = None) -> None:
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Cache).where(
                Cache.telegram_id == user_id,
                Cache.parameter == parameter
            )
        )
        existing_cache = result.scalar_one_or_none()

        if existing_cache:
            if message_id is not None:
                existing_cache.message_id = message_id
        else:
            new_cache = Cache(
                telegram_id=user_id,
                parameter=parameter,
                message_id=message_id
            )
            session.add(new_cache)

        await session.commit()


# –ø–æ–ª—É—á–∞—Ç—å id —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–¥ –ö—ç—à –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É
# –ü—Ä–∏–º–µ—Ä:
# start_message_id = await get_cached_message_id(user_id, "start_message_id")
async def get_cached_message_id(user_id: int, parameter: str) -> int | None:
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Cache).where(
                Cache.telegram_id == user_id,
                Cache.parameter == parameter
            )
        )
        cache_entry = result.scalar_one_or_none()
        return cache_entry.message_id if cache_entry else None


# –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ –∫—ç—à–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É
# await delete_from_cache(user_id, "start_message_id")
async def delete_from_cache(user_id: int, parameter: str) -> None:
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Cache).where(
                Cache.telegram_id == user_id,
                Cache.parameter == parameter
            )
        )
        cache_entry = result.scalar_one_or_none()

        if cache_entry:
            await session.delete(cache_entry)
            await session.commit()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –ü—Ä–∏–º–µ—Ä:
# await create_or_update_user(user_id, first_name, username)
async def create_or_update_user(user_id: int, first_name: str, username: str) -> User:
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = result.scalar_one_or_none()

        if user is None:
            user = User(
                telegram_id=user_id,
                first_name=first_name,
                username=username
            )
            session.add(user)
        else:
            if user.first_name != first_name:
                user.first_name = first_name
            if user.username != username:
                user.username = username
            # session.add(user) –Ω–µ –Ω—É–∂–µ–Ω ‚Äî –æ–±—ä–µ–∫—Ç —É–∂–µ –≤ —Å–µ—Å—Å–∏–∏

        await session.commit()
        return user


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –ü—Ä–∏–º–µ—Ä—ã:
# await update_user_fields(user_id, first_name="–ê–ª–∏—Å–∞", username="alisa2025", is_active=True)
# await update_user_fields(user_id, eighteen_years_old=True)
async def update_user_fields(user_id: int, **fields: Any) -> bool:
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(User).filter_by(telegram_id=user_id)
        )
        user = result.scalar_one_or_none()

        if not user:
            return False  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω

        updated = False
        for field, value in fields.items():
            if hasattr(user, field) and getattr(user, field) != value:
                setattr(user, field, value)
                updated = True

        if updated:
            await session.commit()

        return updated


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async def get_user_by_id(user_id: int) -> User | None:
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = result.scalar_one_or_none()
        return user


# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
async def delete_user_by_id(user_id: int) -> bool:
    async with AsyncSessionLocal() as session:
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –∫—ç—à–µ
        await session.execute(delete(Cache).where(Cache.telegram_id == user_id))
        await session.execute(delete(Reaction).where(Reaction.telegram_id == user_id))
        await session.execute(delete(Payment).where(Payment.telegram_id == user_id))
        
        # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = result.scalar_one_or_none()

        if not user:
            return False

        await session.delete(user)
        await session.commit()
        return True


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –≤ –±–∞–∑—É
async def add_reaction(user_id: int, target_tg_id: int, reaction_str: str):
    async with AsyncSessionLocal() as session:
        stmt = insert(Reaction).values(
            telegram_id=user_id,
            target_tg_id=target_tg_id,
            reaction=reaction_str
        ).on_conflict_do_update(
            index_elements=['telegram_id', 'target_tg_id'],
            set_={'reaction': reaction_str}
        )
        await session.execute(stmt)
        await session.commit()



# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑—É
async def add_payment(user_id: int, amount: int, payment_type: PaymentType, target_id: int | None = None):
    async with AsyncSessionLocal() as session:
        payment = Payment(
            telegram_id=user_id,
            target_tg_id=target_id,
            amount=amount,
            type=payment_type
        )
        session.add(payment)
        await session.commit()


# -----------------------------------------------------------------–≥–µ–æ–ª–æ–∫–∞—Ü–∏—è ------------------------------------------------------


async def get_location_opencage(latitude: float, longitude: float, lang: str = 'en') -> str:
    api_key = opencagedata_API_KEY
    url = "https://api.opencagedata.com/geocode/v1/json"
    params = {
        "q": f"{latitude},{longitude}",
        "key": api_key,
        "language": lang
    }

    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as response:
            data = await response.json()
            try:
                components = data["results"][0]["components"]
                city = components.get("city") or components.get("town") or components.get("village") or "Unknown city"
                country = components.get("country", "Unknown country")
                return country, city
            except (IndexError, KeyError):
                return "Location not found"
            

# –ó–∞–ø–∞—Å–Ω–∞—è
async def get_location_info(latitude, longitude, lang='en'):
    url = "https://nominatim.openstreetmap.org/reverse"
    params = {
        "lat": latitude,
        "lon": longitude,
        "format": "json",
        "accept-language": lang
    }
    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as resp:
            data = await resp.json()
            address = data.get("address", {})
            country = address.get("country")
            city = address.get("city") or address.get("town") or address.get("village")
            return country, city


# ----------------------------------------------------------------- —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è ------------------------------------------------------


# –ù–∞–π—Ç–∏ –°–æ–≤–ø–∞–¥–µ–Ω–∏—è match
# –í–æ–∑—Ä–∞—â–∞–µ—Ç  —Å–ª–æ–≤–∞—Ä—å {id: reaction} –∏ –∫–æ–ª-–≤–æ
async def get_match_targets(user_id: int) -> tuple[dict[int, str], int]:
    async with AsyncSessionLocal() as session:
        user_reactions = aliased(Reaction)
        target_reactions = aliased(Reaction)

        result = await session.execute(
            select(user_reactions.target_tg_id, user_reactions.reaction)
            .join(
                target_reactions,
                (user_reactions.target_tg_id == target_reactions.telegram_id) &
                (user_reactions.telegram_id == target_reactions.target_tg_id) &
                (user_reactions.reaction == target_reactions.reaction)
            )
            .where(
                user_reactions.telegram_id == user_id,
                user_reactions.reaction != "SKIP"  # <-- –∏—Å–∫–ª—é—á–∞–µ–º SKIP
            )
        )

        matches = dict(sorted(result.all(), key=lambda x: x[0]))
        return matches, len(matches)


# –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –ö–æ–ª–ª–µ–∫—Ü–∏–∏
async def get_collection_targets(user_id: int) -> tuple[list[int], int]:
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Payment.target_tg_id)
            .where(Payment.telegram_id == user_id, Payment.target_tg_id != None)
        )
        ids = result.scalars().unique().all()
        sorted_ids = sorted(ids)
        return sorted_ids, len(ids)


# –ù–∞–π—Ç–∏ –ø–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è–º, –∏—Å–∫–ª—é—á–∞—è –≤–∑–∞–∏–º–Ω—ã—Ö –∏ —Ç–µ—Ö, –∫—Ç–æ –≤ –ö–æ–ª–ª–µ–∫—Ü–∏–∏
async def get_intent_targets(user_id: int, intent: str) -> tuple[list[int], int]:
    async with AsyncSessionLocal() as session:
        # –ü–æ–¥–∑–∞–ø—Ä–æ—Å: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–º —è –ø–æ—Å—Ç–∞–≤–∏–ª —ç—Ç—É –∂–µ —Ä–µ–∞–∫—Ü–∏—é (–≤–∑–∞–∏–º–Ω—ã–µ)
        subq_mutual = (
            select(Reaction.target_tg_id)
            .where(
                Reaction.telegram_id == user_id,
                Reaction.reaction == intent.upper()
            )
        )

        # –ü–æ–¥–∑–∞–ø—Ä–æ—Å: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–º —è –ø–æ—Å—Ç–∞–≤–∏–ª SKIP
        subq_skipped = (
            select(Reaction.target_tg_id)
            .where(
                Reaction.telegram_id == user_id,
                Reaction.reaction == "SKIP"
            )
        )

        # –ü–æ–¥–∑–∞–ø—Ä–æ—Å: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ–≥–æ —è –æ–ø–ª–∞—Ç–∏–ª
        subq_collection = (
            select(Payment.target_tg_id)
            .where(
                Payment.telegram_id == user_id,
                Payment.target_tg_id != None
            )
        )

        # –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –ø–æ–¥–∑–∞–ø—Ä–æ—Å: –∏—Å–∫–ª—é—á–∞–µ–º –≤—Å–µ—Ö –∏–∑ —ç—Ç–∏—Ö 3 –ø–æ–¥–≥—Ä—É–ø–ø
        union_subq = union_all(subq_mutual, subq_skipped, subq_collection).subquery()

        # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å: —Ç–µ, –∫—Ç–æ –º–Ω–µ –ø–æ—Å—Ç–∞–≤–∏–ª intent, –Ω–æ –Ω–µ –ø–æ–ø–∞–ª –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        result = await session.execute(
            select(Reaction.telegram_id)
            .where(
                Reaction.target_tg_id == user_id,
                Reaction.reaction == intent.upper(),
                ~Reaction.telegram_id.in_(select(union_subq.c.target_tg_id))
            )
        )

        ids = result.scalars().unique().all()
        sorted_ids = sorted(ids)
        return sorted_ids, len(ids)


# –ù–∞–π—Ç–∏ id-–¥–æ –∏ id-–ø–æ—Å–ª–µ –≤ —Å–ø–∏—Å–∫–µ
async def get_prev_next_ids(current_id: int, ids: list[int]) -> tuple[int | None, int | None]:
    try:
        index = ids.index(current_id)
        prev_id = ids[index - 1] if index > 0 else None
        next_id = ids[index + 1] if index < len(ids) - 1 else None
        return prev_id, next_id
    except ValueError:
        return None, None


# –≤–æ–∑–≤—Ä–∞—Ç id –µ—Å–ª–∏ –Ω–µ None
async def pick_id(ids: list[int | None]) -> tuple[int | str, str | int, str | int]:
    back_id, next_id = ids
    chosen = next_id or back_id or "None"
    return chosen, back_id, next_id

