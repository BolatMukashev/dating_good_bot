from sqlalchemy import select, update, or_
from sqlalchemy.orm import aliased
from models import User, Reaction, Payment, Cache, Gender
from typing import Any, Optional
from db_connect import AsyncSessionLocal
import aiohttp
from messages import supported_languages, GENDER_LABELS, GENDER_SEARCH_LABELS
from sqlalchemy.orm import aliased


__all__ = ['save_to_cache',
           'get_cached_message_id',
           'create_or_update_user',
           'update_user_fields',
           'get_user_by_id',
           'add_reaction',
           'add_payment',
           'get_location_info',
           'get_user_language',
           'find_first_matching_user',
           'get_caption',
           'get_gender_label',
           'get_gender_search_label']


async def find_first_matching_user(current_user_id: int) -> Optional[User]:
    async with AsyncSessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(User).where(User.telegram_id == current_user_id)
        )
        current_user = result.scalar_one_or_none()
        if not current_user:
            return None

        gender = current_user.gender
        gender_search = current_user.gender_search

        # –ö–æ–≥–æ —Ç—ã –∏—â–µ—à—å
        gender_condition = or_(
            User.gender == gender_search,
            gender_search == Gender.ANY
        )

        # –ü–æ–¥—Ö–æ–¥–∏—à—å –ª–∏ —Ç—ã –∏–º
        if gender == Gender.ANY:
            search_condition = User.gender_search == Gender.ANY
        else:
            search_condition = or_(
                User.gender_search == gender,
                User.gender_search == Gender.ANY
            )

        # –ò—Å–∫–ª—é—á–∞–µ–º –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ
        not_incognito_condition = or_(
            User.incognito_switch == False,
            User.incognito_pay == False
        )

        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Ö, –Ω–∞ –∫–æ–≥–æ —É–∂–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª
        ReactionAlias = aliased(Reaction)
        subquery = select(ReactionAlias.target_tg_id).where(
            ReactionAlias.telegram_id == current_user_id
        )

        # –û–±—â–∏–µ —É—Å–ª–æ–≤–∏—è
        base_conditions = [
            User.telegram_id != current_user_id,
            gender_condition,
            search_condition,
            not_incognito_condition,
            User.telegram_id.not_in(subquery)
        ]

        # üëâ –®–∞–≥ 1: —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ —Å—Ç—Ä–∞–Ω–µ –∏ –≥–æ—Ä–æ–¥—É
        query_city = select(User).where(
            *base_conditions,
            User.city == current_user.city,
            User.country == current_user.country
        ).limit(1)

        result = await session.execute(query_city)
        match = result.scalar_one_or_none()
        if match:
            return match

        # üëâ –®–∞–≥ 2: –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –≥–æ—Ä–æ–¥–µ ‚Äî –∏—â–µ–º –ø–æ —Å—Ç—Ä–∞–Ω–µ
        query_country = select(User).where(
            *base_conditions,
            User.country == current_user.country
        ).limit(1)

        result = await session.execute(query_country)
        match = result.scalar_one_or_none()
        if match:
            return match

        # üëâ –®–∞–≥ 3: —Å–æ–≤—Å–µ–º –Ω–∏–∫–æ–≥–æ
        return None


async def get_caption(user: User) -> str:
    # –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    caption=(f"<b>{user.first_name}</b>"
    f"\nüìå {user.country_local}, {user.city_local}"
    f"\n‚ö§ {user.gender.value}, {user.gender_search.value}"
    f"\n<i>{user.about_me}</i>")
    return caption


async def get_gender_label(gender: Gender, lang: str = "ru") -> str:
    return GENDER_LABELS[lang][gender]


async def get_gender_search_label(gender: Gender, lang: str = "ru") -> str:
    return GENDER_SEARCH_LABELS[lang][gender]


# —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ö—ç—à —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
# –ü—Ä–∏–º–µ—Ä:
# await save_to_cache(user_id, "start_message_id", starting_message.message_id)
# await save_to_cache(callback.from_user.id, "invoice_message_id", sent_invoice.message_id)
async def save_to_cache(user_id: int, parameter: str, message_id: int = None) -> None:
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Cache).where(
                Cache.telegram_id == user_id,
                Cache.parameter == parameter
            )
        )
        existing_cache = result.scalar_one_or_none()

        if existing_cache:
            if message_id is not None:
                existing_cache.message_id = message_id
        else:
            new_cache = Cache(
                telegram_id=user_id,
                parameter=parameter,
                message_id=message_id
            )
            session.add(new_cache)

        await session.commit()


# –ø–æ–ª—É—á–∞—Ç—å id —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–¥ –ö—ç—à –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É
# –ü—Ä–∏–º–µ—Ä:
# start_message_id = await get_cached_message_id(user_id, "start_message_id")
async def get_cached_message_id(user_id: int, parameter: str) -> int | None:
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Cache).where(
                Cache.telegram_id == user_id,
                Cache.parameter == parameter
            )
        )
        cache_entry = result.scalar_one_or_none()
        return cache_entry.message_id if cache_entry else None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –ü—Ä–∏–º–µ—Ä:
# await create_or_update_user(user_id, first_name, username)
async def create_or_update_user(user_id: int, first_name: str, username: str) -> None:
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == user_id)
        )
        existing_user = result.scalar_one_or_none()

        if not existing_user:
            new_user = User(
                telegram_id=user_id,
                first_name=first_name,
                username=username
            )
            session.add(new_user)
        else:
            updated = False
            if existing_user.first_name != first_name:
                existing_user.first_name = first_name
                updated = True
            if existing_user.username != username:
                existing_user.username = username
                updated = True
            if updated:
                session.add(existing_user)

        await session.commit()


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –ü—Ä–∏–º–µ—Ä—ã:
# await update_user_fields(user_id, first_name="–ê–ª–∏—Å–∞", username="alisa2025", is_active=True)
# await update_user_fields(user_id, eighteen_years_old=True)
async def update_user_fields(user_id: int, **fields: Any) -> bool:
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(User).filter_by(telegram_id=user_id)
        )
        user = result.scalar_one_or_none()

        if not user:
            return False  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω

        updated = False
        for field, value in fields.items():
            if hasattr(user, field) and getattr(user, field) != value:
                setattr(user, field, value)
                updated = True

        if updated:
            await session.commit()

        return updated


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async def get_user_by_id(user_id: int) -> User | None:
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = result.scalar_one_or_none()
        return user


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –≤ –±–∞–∑—É
async def add_reaction(user_id: int, target_tg_id: int, reaction_str: str):
    async with AsyncSessionLocal() as session:
        new_reaction = Reaction(telegram_id=user_id, target_tg_id=target_tg_id, reaction=reaction_str)
        session.add(new_reaction)
        await session.commit()


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑—É
async def add_payment(user_id: int, target_tg_id: int, price: int):
    async with AsyncSessionLocal() as session:
        payment = Payment(telegram_id=user_id, target_tg_id=target_tg_id, price=price)
        session.add(payment)
        await session.commit()


async def get_location_info(latitude, longitude, lang='en'):
    # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º
    url = "https://nominatim.openstreetmap.org/reverse"
    params = {
        "lat": latitude,
        "lon": longitude,
        "format": "json",
        "accept-language": lang
    }
    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as resp:
            data = await resp.json()
            address = data.get("address", {})
            country = address.get("country")
            city = address.get("city") or address.get("town") or address.get("village")
            return country, city
        

async def get_user_language(message):
    # –ø–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω–∞—á–µ - –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    user_lang = message.from_user.language_code
    if user_lang not in supported_languages:
        user_lang = 'en'
    return user_lang
