from aiogram.types import ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
import random
from models import ReactionType
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from uuid import uuid4


__all__ = ['get_approval_button',
           'get_btn_to_search',
           'get_matches_menu_buttons',
           'get_wants_user',
           'get_matches_user',
           'get_gender_buttons',
           'get_gender_search_buttons',
           'get_profile_edit_buttons',
           'get_retry_registration_button',
           'get_location_button',
           'get_start_button_match_menu',
           'get_start_button_search_menu',
           'payment_keyboard',
           'reload_search']


async def get_approval_button():
    # –ö–Ω–æ–ø–∫–∞ 18+ –∏ —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º
    button = InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="18yes_and_approval")
    markup = InlineKeyboardMarkup(inline_keyboard=[[button]])
    
    return markup


async def reload_search():
    # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫
    button = InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å üîÑ", callback_data="reload_search")
    markup = InlineKeyboardMarkup(inline_keyboard=[[button]])
    
    return markup


async def get_btn_to_search(target_name, target_tg_id):
    # –ø–æ–ª—É—á–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
    button1 = InlineKeyboardButton(text="‚òï –°–≤–∏–¥–∞–Ω–∏–µ", callback_data=f"reaction|LOVE|{target_name}|{target_tg_id}")
    button2 = InlineKeyboardButton(text="üë©‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë® –ü–æ—Å—Ç–µ–ª—å", callback_data=f"reaction|SEX|{target_name}|{target_tg_id}")
    button3 = InlineKeyboardButton(text="üí¨ –û–±—â–µ–Ω–∏–µ", callback_data=f"reaction|CHAT|{target_name}|{target_tg_id}")
    button4 = InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è©", callback_data=f"reaction|SKIP|{target_name}|{target_tg_id}")
    markup = InlineKeyboardMarkup(inline_keyboard=[[button1, button2, button3], [button4]])
    
    return markup


async def get_matches_menu_buttons(match_count: int, collection_count: int, love_count: int, sex_count: int, chat_count: int):
    # –ö–Ω–æ–ø–∫–∏ match –º–µ–Ω—é
    button0 = InlineKeyboardButton(text=f"üíò –°–æ–≤–ø–∞–¥–µ–Ω–∏—è [{match_count}]", callback_data=f"matches")
    button1 = InlineKeyboardButton(text=f"‚ú® –ö–æ–ª–ª–µ–∫—Ü–∏—è [{collection_count}]", callback_data=f"collection")
    button2 = InlineKeyboardButton(text=f"–°–≤–∏–¥–∞–Ω–∏–µ [{love_count}]", callback_data=f"who_wants|LOVE")
    button3 = InlineKeyboardButton(text=f"–ü–æ—Å—Ç–µ–ª—å [{sex_count}]", callback_data=f"who_wants|SEX")
    button4 = InlineKeyboardButton(text=f"–û–±—â–µ–Ω–∏–µ [{chat_count}]", callback_data=f"who_wants|CHAT")
    button5 = InlineKeyboardButton(text=f"–û–±–Ω–æ–≤–∏—Ç—å üîÑ", callback_data=f"reload_matches_menu")
    markup = InlineKeyboardMarkup(inline_keyboard=[[button0], [button1], [button2, button3, button4], [button5]])
    
    return markup


async def get_wants_user(reaction: ReactionType, price: int, priced: bool = False, user_info: dict=None, id_in_cache: int=0):
    if reaction == "LOVE":
        pass
    elif reaction == "SEX":
        pass
    elif reaction == "CHAT":
        pass
    if user_info == None:
        random_user = random.choice(test_db)
        target_tg_id = random_user.get('tg_id', 0)
        target_name = random_user.get('name', '')
        target_username = random_user.get('username', '')
        description = random_user.get('description', '')
        photo_id = random_user.get('photo_id', '')
        caption=f"<b>{target_name}</b>\n<i>{description}</i>"
    else:
        target_name = user_info.get('target_name', '')
        caption = user_info.get('caption', '')
        photo_id = user_info.get('photo_id', '')

    if priced:
        button1 = InlineKeyboardButton(text=f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ üíò –°–æ–≤–ø–∞–¥–µ–Ω–∏—è", callback_data=f"pass")
    else:
        button1 = InlineKeyboardButton(text=f"–î–æ–±–∞–≤–∏—Ç—å –≤ –°–æ–≤–ø–∞–¥–µ–Ω–∏—è {price} ‚≠êÔ∏è", callback_data=f"wants_pay|{target_tg_id}|{price}|{reaction}", pay=True)
    button2 = InlineKeyboardButton(text=" ‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"wants_slider|BACK|{id_in_cache}|{reaction}")
    button3 = InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"wants_slider|NEXT|{id_in_cache}||{reaction}")
    button4 = InlineKeyboardButton(text="‚èÆÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data=f"matches_menu")
    markup = InlineKeyboardMarkup(inline_keyboard=[[button1], [button2, button3], [button4]])

    return photo_id, caption, markup


async def get_matches_user():
    random_user = None
    target_tg_id = random_user.get('tg_id', 0)
    target_name = random_user.get('name', '')
    target_username = random_user.get('username', '')
    description = random_user.get('description', '')
    photo_id = random_user.get('photo_id', '')
    caption=f"<b>{target_name}</b>\n<i>{description}</i>"

    button1 = InlineKeyboardButton(text="‚úâÔ∏è –ù–∞—á–∞—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ", callback_data=f"matches_chat|{target_name}|{target_tg_id}", url=f"https://t.me/{target_username}")
    button2 = InlineKeyboardButton(text=" ‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"matches_back|{target_name}|{target_tg_id}")
    button3 = InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"matches_next|{target_name}|{target_tg_id}")
    button4 = InlineKeyboardButton(text="‚èÆÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data=f"matches_menu")
    markup = InlineKeyboardMarkup(inline_keyboard=[[button1], [button2, button3], [button4]])
    
    return photo_id, caption, markup


async def get_gender_buttons():
    # –í—ã–±–æ—Ä–∞ –ø–æ–ª–∞
    button1 = InlineKeyboardButton(text="–ú—É–∂—á–∏–Ω–∞", callback_data="MAN")
    button2 = InlineKeyboardButton(text="–ñ–µ–Ω—â–∏–Ω–∞", callback_data="WOMAN")
    button3 = InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="ANY")
    markup = InlineKeyboardMarkup(inline_keyboard=[[button1], [button2], [button3]])
    
    return markup


async def get_gender_search_buttons():
    # –í—ã–±–æ—Ä–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª–∞
    button1 = InlineKeyboardButton(text="–ò—â—É –ú—É–∂—á–∏–Ω—É", callback_data="search_man")
    button2 = InlineKeyboardButton(text="–ò—â—É –ñ–µ–Ω—â–∏–Ω—É", callback_data="search_woman")
    button3 = InlineKeyboardButton(text="–ü–æ–ª –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è", callback_data="search_any")
    markup = InlineKeyboardMarkup(inline_keyboard=[[button1], [button2], [button3]])
    
    return markup


async def get_profile_edit_buttons(pay_status: bool, incognito_switch: bool):
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ
    if not pay_status:
        status = 'NOT_PAYED'
        btn_text = "–°—Ç–∞—Ç—å –ò–Ω–∫–æ–≥–Ω–∏—Ç–æ ü´•"
    else:
        if incognito_switch:
            status = 'ON'
            btn_text = "–ò–Ω–∫–æ–≥–Ω–∏—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ ‚úÖ"
        else:
            status = 'OFF'
            btn_text = "–ò–Ω–∫–æ–≥–Ω–∏—Ç–æ –≤—ã–∫–ª—é—á–µ–Ω–æ üö´"
    
    unique_suffix = uuid4().hex[:4]
    button1 = InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É ‚úè", callback_data="profile_edit")
    button2 = InlineKeyboardButton(text=btn_text, callback_data=f"incognito|{status}|{unique_suffix}")
    markup = InlineKeyboardMarkup(inline_keyboard=[[button1], [button2]])
    
    return markup


async def get_retry_registration_button():
    # –ö–Ω–æ–ø–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ—Ç username
    button1 = InlineKeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üîÑ", callback_data="retry_registration")
    markup = InlineKeyboardMarkup(inline_keyboard=[[button1]])
    
    return markup


async def get_location_button():
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ (–Ω–µ –∏–Ω–ª–∞–π–Ω)
    kb = [[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]]
    keyboard = ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É")
    
    return keyboard


async def get_start_button_match_menu():
    # –ö–Ω–æ–ø–∫–∞ –°—Ç–∞—Ä—Ç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –°–æ–≤–ø–∞–¥–µ–Ω–∏—è
    button = InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –°–æ–≤–ø–∞–¥–µ–Ω–∏—è", callback_data="start_btn_match_menu")
    markup = InlineKeyboardMarkup(inline_keyboard=[[button]])
    
    return markup


async def get_start_button_search_menu():
    # –ö–Ω–æ–ø–∫–∞ –°—Ç–∞—Ä—Ç –ü–æ–∏—Å–∫–∞
    button = InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="start_btn_search_menu")
    markup = InlineKeyboardMarkup(inline_keyboard=[[button]])
    
    return markup


def payment_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Telegram Stars ‚≠êÔ∏è", pay=True)
    
    return builder.as_markup()