import os
import asyncio
from aiohttp import web
from db_connect import async_engine
from models import Base
from config import *
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiogram import Bot
from main import logger, bot, dp


# ------------------------------------------------------------------- –ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞ -------------------------------------------------------
async def on_startup(bot: Bot) -> None:
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async with async_engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        await bot.set_webhook(
            url=WEBHOOK_URL,
            drop_pending_updates=True,
            allowed_updates=["message", "callback_query", "pre_checkout_query"]
        )
        
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
        webhook_info = await bot.get_webhook_info()
        logger.info(f"üìã Webhook info: {webhook_info}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
        raise


async def on_shutdown(bot: Bot) -> None:
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        await bot.delete_webhook()
        logger.info("üî• Webhook —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")


def create_app() -> web.Application:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    
    # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –ø—Ä–æ–≤–µ—Ä–∫—É
    async def health_check(request):
        return web.Response(text="Bot is running!", status=200)
    
    app.router.add_get("/health", health_check)
    app.router.add_get("/", health_check)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook handler
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º webhook path
    webhook_requests_handler.register(app, path=WEBHOOK_PATH)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º
    setup_application(app, dp, bot=bot)
    
    # –î–æ–±–∞–≤–ª—è–µ–º startup –∏ shutdown —Ö—ç–Ω–¥–ª–µ—Ä—ã
    app.on_startup.append(lambda app: on_startup(bot))
    app.on_shutdown.append(lambda app: on_shutdown(bot))
    
    return app


# ------------------------------------------------------------------- –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏) -------------------------------------------------------

async def main_polling():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å polling (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async with async_engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        
        # –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("üßπ Webhook —É–¥–∞–ª–µ–Ω –¥–ª—è polling —Ä–µ–∂–∏–º–∞")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ polling —Ä–µ–∂–∏–º–µ: {e}")
        raise
    finally:
        await bot.session.close()


# ------------------------------------------------------------------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ -------------------------------------------------------

if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
    
    if BOT_MODE == 'polling':
        # –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
        logger.info("üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: Polling")
        asyncio.run(main_polling())
    else:
        # –ü—Ä–æ–¥–∞–∫—à–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook
        logger.info("üöÄ –ü—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º: Webhook")
        app = create_app()
        
        # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è webhook
        if LOCAL_WEBHOOK:
            web.run_app(app, host='0.0.0.0', port=PORT)
        else:
            # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ Heroku, Railway, etc.)
            port = int(os.getenv('PORT', PORT))
            web.run_app(app, host='0.0.0.0', port=port)

            